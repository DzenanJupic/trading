            .subcommand(SubCommand::with_name("api")
                .about("A CLI for manually changing API settings")
                .arg(Arg::with_name("change")
                    .help("changes the used api")
                    .short("c")
                    .long("change")
                    .takes_value(true)
                )
                .arg(Arg::with_name("add")
                    .help("adds a new api access to the apis")
                    .short("a")
                    .long("add")
                    .takes_value(true)
                    .possible_values(&BROKERS)
                    .requires_ifs(&BROKER_REQUIREMENTS)
                )
                .arg(Arg::with_name("key")
                    .help("sets the api key")
                    .short("k")
                    .long("key")
                    .takes_value(true)
                    .env("API_KEY")
                )
                .arg(Arg::with_name("secret")
                    .help("sets the api secret")
                    .short("s")
                    .long("secret")
                    .takes_value(true)
                    .env("API_SECRET")
                )
                .arg(Arg::with_name("username")
                    .help("sets the api username")
                    .short("u")
                    .long("username")
                    .takes_value(true)
                    .env("API_USERNAME")
                )
                .arg(Arg::with_name("password")
                    .help("sets the api password")
                    .short("p")
                    .long("password")
                    .takes_value(true)
                    .env("API_PASSWORD")
                )
            )





.subcommand(SubCommand::with_name("start")
            .about("Starts the trading algorithm")
            .arg(Arg::with_name("trading type")
                .help("determine weather you want to trade live (with real money!), paper (without money) or back (back tests you algorithm)")
                .takes_value(true)
                .possible_values(&["live", "paper", "back"])
            )
            .arg(Arg::with_name("ISIN")
                .help("the ISIN of the product you want to trade")
                .short("i")
                .long("isin")
                .takes_value(true)
                .required_unless_one(&["WKN", "SYMBOL"])
                .validator(|value| {
                    if value.len() == 12 { Ok(()) } else { Err("ISIN needs to be 12 chars long!".to_string()) }
                })
            )
            .arg(Arg::with_name("SYMBOL")
                .help("the symbol of the product you want to trade")
                .short("s")
                .long("symbol")
                .takes_value(true)
                .required_unless("ISIN")
                .conflicts_with("ISIN")
                .possible_values(&SYMBOLS)
            )
            .arg(Arg::with_name("output")
                .help("Specifies the amount of date that should be displayed [default: trades]\
                \nThis argument let's you decide what amount of information should be displayed \
                while trading. Outputting  data will lead to a performance overhead. Still it's \
                recommended to output the trades, since this gives you the ability to check if \
                the algorithm goes crazy. full and none can't be specified together! \
                If full or none is set it overrides all other values. \
                Notice that you always have the option to look at the data afterwards if you save it.")
                .short("o")
                .long("output")
                .takes_value(true)
                .multiple(true)
                .possible_values(&OUTPUT)
                .default_value("text trade")
            )
            .arg(Arg::with_name("save")
                .help("Weather or not data like trades should be saved\
                \nThis argument let's you decide how much data should be saved. \
                Please notice that this could have a little performance overhead. Still it's \
                absolutely recommended to save the data. Data saves will be asyncness and can \
                save your butt if one of the algorithms goes crazy. \
                Usually it also shouldn't be necessary to save the charts, since you can pull \
                them from the internet later.")
                .long("save")
                .takes_value(true)
                .multiple(true)
                .possible_values(&OUTPUT)
                .default_value("trade")
            )
        )